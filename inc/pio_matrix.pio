.program pio_matrix

.wrap_target
    out x, 1
    jmp !x do_zero
do_one:
    set pins, 1 [4]
    jmp cont
do_zero:
    set pins, 1 [2]
    set pins, 0 [2]
cont:
    set pins, 0 [1]
.wrap


% c-sdk {
static inline void pio_matrix_program_init(PIO pio, uint sm, uint offset, uint pin)
{
    pio_sm_config c = pio_matrix_program_get_default_config(offset);

    // Define o pino para fazer parte do grupo de saída set, ou seja, definido pela instrução set
    sm_config_set_set_pins(&c, pin, 1);

    // Anexa o pio ao GPIO
    pio_gpio_init(pio, pin);

    // Define a direção do pino como saída no PIO
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    // Define o clock do PIO para 8MHz, dando 10 ciclos por dígito binário do LED
    float div = clock_get_hz(clk_sys) / 8000000.0;
    sm_config_set_clkdiv(&c, div);

    // Dá todo o espaço do FIFO para o TX (não usando RX)
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    // Shift para a esquerda, usar autopull, próximo limiar de pull 24 bits
    sm_config_set_out_shift(&c, false, true, 24);

    // Define sticky -- continua a conduzir valor da última set/out. Outras coisas desativadas
    sm_config_set_out_special(&c, true, false, false);

    // Carrega a configuração e pula para o início do programa
    pio_sm_init(pio, sm, offset, &c);
    
    // habilita esta máquina de estado PIO
    pio_sm_set_enabled(pio, sm, true);
}
%}